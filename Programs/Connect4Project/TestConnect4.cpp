#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <iostream>
#include <string>
#include <doctest.h>
#include "Connect4.h"

TEST_CASE("Test can create Fractions using two constructors") {
    Connect4 f1({
            {'0','0','0','0','0','0','0'},
            {'0','0','0','0','0','0','0'},
            {'0','0','0','0','0','0','0'},
            {'0','0','0','0','0','0','0'},
            {'0','0','0','0','0','0','0'},
            {'0','0','0','0','0','0','0'}}
    );
    CHECK(f1.to_string() == "\n0000000\n0000000\n0000000\n0000000\n0000000\n0000000\n");
    Connect4 f2({
            {'0','0','0','0','0','0','0'},
            {'0','0','0','0','0','0','0'},
            {'0','0','0','0','0','0','0'},
            {'0','0','0','0','0','0','0'},
            {'0','0','0','0','0','0','0'},
            {'X','O','0','0','0','0','0'}}
    );
    CHECK(f2.to_string() == "\n0000000\n0000000\n0000000\n0000000\n0000000\nXO00000\n");
}

TEST_CASE("testing human input") {
    Connect4 f3({
        {'0','0','0','0','0','0','0'},
        {'0','0','0','0','0','0','0'},
        {'0','0','0','0','0','0','0'},
        {'0','0','0','0','0','0','0'},
        {'0','0','0','0','0','0','0'},
        {'0','0','0','0','0','0','0'}}
        ,1);
    CHECK(f3.MakeMoveDisplayTest() == "\n0000000\n0000000\n0000000\n0000000\n0000000\nX000000\n");

    Connect4 f4({
       {'0','0','0','0','0','0','0'},
       {'0','0','0','0','0','0','0'},
       {'0','0','0','0','0','0','0'},
       {'0','0','0','0','0','0','0'},
       {'0','0','0','0','0','0','0'},
       {'0','0','0','0','0','0','0'}}
       ,2);
    CHECK(f4.MakeMoveDisplayTest() == "\n0000000\n0000000\n0000000\n0000000\n0000000\n0X00000\n");
    Connect4 f5({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'O','0','0','0','0','0','0'}}
      ,1);
    CHECK(f5.MakeMoveDisplayTest() == "\n0000000\n0000000\n0000000\n0000000\nX000000\nO000000\n");
}

TEST_CASE("testing InCollumVictoryCondtion") {
    Connect4 f6({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'X','0','0','0','0','0','0'},
      {'X','0','0','0','0','0','0'},
      {'X','0','0','0','0','0','0'}}
      ,1);
    CHECK(f6.MakeMoveInColumnTest() == 1);
    Connect4 f7({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'X','0','0','0','0','0','0'},
      {'X','0','0','0','0','0','0'}}
      ,1);
    CHECK(f6.MakeMoveInColumnTest() == 0);
}

TEST_CASE("Test the In Row Victory Condition") {
    Connect4 f8({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','X','X','X','0','0','0'}}
      ,1);
    CHECK(f8.MakeMoveInRowTest() == 1);
    Connect4 f9({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'X','X','0','X','0','0','0'}}
      ,3);
    CHECK(f9.MakeMoveInRowTest() == 1);
}


TEST_CASE("Test the In Diagonal Victory Condition") {
    Connect4 f10({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','X','0','0','0'},
      {'0','0','X','O','0','0','0'},
      {'0','X','O','O','0','0','0'},
      {'0','O','X','X','0','0','0'}}
      ,1);
    CHECK(f10.MakeMoveInDiagonalTest() == 1);
    Connect4 f11({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','X','O','0','0','0'},
      {'0','X','O','O','0','0','0'},
      {'X','O','X','X','0','0','0'}}
      ,4);
    CHECK(f11.MakeMoveInDiagonalTest() == 1);
    Connect4 f12({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','X','0','0','0'},
      {'0','0','0','O','0','0','0'},
      {'0','X','O','O','0','0','0'},
      {'X','O','X','X','0','0','0'}}
      ,3);
    CHECK(f12.MakeMoveInDiagonalTest() == 1);
  Connect4 f13({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','X','0','0','0'},
      {'0','0','0','O','X','0','0'},
      {'0','0','0','O','X','X','0'},
      {'0','0','0','O','O','X','0'}}
      ,7);
    CHECK(f13.MakeMoveInDiagonalTest() == 1);
    Connect4 f14({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','O','X','0','0'},
      {'0','0','0','O','X','X','0'},
      {'0','0','0','O','O','X','X'}}
      ,4);
    CHECK(f14.MakeMoveInDiagonalTest() == 1);
  Connect4 f15({
      {'0','0','0','0','0','0','0'},
      {'0','0','0','0','0','0','0'},
      {'0','0','0','X','0','0','0'},
      {'0','0','0','O','0','0','0'},
      {'0','0','0','O','X','X','0'},
      {'0','0','0','O','O','X','X'}}
      ,5);
  CHECK(f15.MakeMoveInDiagonalTest() == 1);
}